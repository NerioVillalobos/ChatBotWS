// app.js
const { createBot, createProvider, createFlow, addKeyword, EVENTS } = require('@bot-whatsapp/bot')

const QRPortalWeb = require('@bot-whatsapp/portal')
const BaileysProvider = require('@bot-whatsapp/provider/baileys')
const MockAdapter = require('@bot-whatsapp/database/mock')

/**
 * IMPORTANTE: Recuerda que los flujos se declaran de forma que los flujos "hijos"
 * (a los que se llega desde otro flujo) deben ser declarados ANTES del flujo "padre"
 * que los invoca.
 */

// ----------------------------------------------------
// FLUJOS FINALES / HOJAS DEL √ÅRBOL
// ----------------------------------------------------

// Flujo para "Llama a una persona"
const flowLlamarPersona = addKeyword(['llamar_persona', 'llamar', 'contacto', 'agente', 'hablar con alguien']) // A√±adimos m√°s keywords para derivaci√≥n
    .addAnswer('Para asistencia personalizada, por favor, comun√≠cate con nosotros directamente al siguiente n√∫mero:')
    .addAnswer('*üìû https://bit.ly/4l1iOvh *', null, async (ctx, { flowDynamic }) => {
        // Enviar un enlace directo a WhatsApp para que puedan hacer clic
        await flowDynamic('Haz clic aqu√≠ para iniciar un chat');
    })
    .addAnswer('Horario de atenci√≥n: Lunes a Viernes de 9:00 AM a 6:00 PM.', { delay: 120000 }) // Puedes ajustar este horario
    .addAnswer('¬øHay algo m√°s en lo que pueda ayudarte?')
    .addAnswer('Escribe *MENU* para volver al inicio.', { capture: true }, async (ctx, { gotoFlow }) => {
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }
    });
    
// Flujo para "Consultar precios de los servicios"
const flowConsultarPrecios = addKeyword(['consultar_precios', 'precios', 'planes', 'costo'])
    .addAnswer('Para consultar nuestros planes y precios, visita nuestra p√°gina web: [Link a la P√°gina de Precios]')
    .addAnswer('Tambi√©n puedes contactarnos directamente al *[N√∫mero de Ventas]* para una atenci√≥n personalizada.')
    .addAnswer('¬øHay algo m√°s en lo que pueda ayudarte?', { delay: 1000 })
    .addAnswer('Escribe *MENU* para volver al inicio.', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }
        return fallBack('Si deseas explorar otras opciones, escribe *MENU* para volver al inicio.');
    });

// Flujo para "Conocer los medios de pago"
const flowMediosPago = addKeyword(['medios_pago', 'pagos', 'como pagar', 'donde pago'])
    .addAnswer('Puedes realizar tus pagos a trav√©s de los siguientes medios:', { delay: 500 })
    .addAnswer('‚Ä¢ Pago en l√≠nea: [Link al Portal de Pagos]\n‚Ä¢ Transferencia bancaria: [Datos de Cuenta Bancaria]\n‚Ä¢ Puntos de pago f√≠sicos: [Lista de Puntos de Pago]')
    .addAnswer('Recuerda incluir tu n√∫mero de cliente en la referencia.')
    .addAnswer('¬øHay algo m√°s en lo que pueda ayudarte?', { delay: 1000 })
    .addAnswer('Escribe *MENU* para volver al inicio.', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }
        return fallBack('Si deseas explorar otras opciones, escribe *MENU* para volver al inicio.');
    });

// Flujo para "Informar un Pago" (Aqu√≠ es donde en Fase 2 conectar√≠as con la DB de deudas)
const flowInformarPago = addKeyword(['informar_pago', 'ya pague', 'reportar pago'])
    .addAnswer('Para informar tu pago, por favor, env√≠anos una captura del comprobante junto con tu n√∫mero de cliente o DNI.')
    .addAnswer('En breve verificaremos tu pago y actualizaremos tu estado.')
    .addAnswer('¬øHay algo m√°s en lo que pueda ayudarte?', { delay: 1000 })
    .addAnswer('Escribe *MENU* para volver al inicio.', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }
        return fallBack('Si deseas explorar otras opciones, escribe *MENU* para volver al inicio.');
    });

// ----------------------------------------------------
// FLUJOS INTERMEDIOS
// ----------------------------------------------------

// Flujo para "Servicio T√©cnico"
const flowServicioTecnico = addKeyword(['tecnico', 'problema', 'no tengo internet', 'soporte'])
    .addAnswer('¬°Importante! Antes de continuar, por favor, realiza estos pasos:')
    .addAnswer('‚Ä¢ Reinicia tu router o equipo.\n‚Ä¢ Verifica los cables y la alimentaci√≥n el√©ctrica.\n‚Ä¢ Confirma que realizaste estos pasos.', { delay: 1000 })
    .addAnswer('¬øYa realizaste estos pasos? (S√≠/No)', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        if (ctx.body.toLowerCase().includes('si') || ctx.body.toLowerCase().includes('s√≠')) {
            return gotoFlow(flowLlamarPersona);
        } else if (ctx.body.toLowerCase().includes('no')) {
            return fallBack('Es fundamental que realices estos pasos para poder diagnosticar tu problema. Por favor, intenta de nuevo cuando los hayas completado. Si a√∫n as√≠ no puedes, podemos conectarte con un agente. Escribe *MENU* para volver al inicio.');
        } else {
            return fallBack('No entend√≠ tu respuesta. Por favor, responde "S√≠" o "No". Escribe *MENU* para volver al inicio.');
        }
    });

// Flujo para "Atenci√≥n Administrativa"
const flowAtencionAdministrativa = addKeyword(['administrativa', 'factura', 'pagos', 'planes', 'administracion'])
    .addAnswer('¬øEn qu√© puedo ayudarte con Atenci√≥n Administrativa?', { delay: 500 })
    // MODIFICADO: Uso de emojis de n√∫meros
    .addAnswer('1Ô∏è‚É£ Informar un Pago\n2Ô∏è‚É£ Conocer Medios de Pago\n3Ô∏è‚É£ Consultar Precios de los Servicios', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        if (ctx.body.includes('1') || ctx.body.toLowerCase().includes('informar') || ctx.body.includes('1Ô∏è‚É£')) {
            return gotoFlow(flowInformarPago);
        }
        if (ctx.body.includes('2') || ctx.body.toLowerCase().includes('medios') || ctx.body.includes('2Ô∏è‚É£')) {
            return gotoFlow(flowMediosPago);
        }
        if (ctx.body.includes('3') || ctx.body.toLowerCase().includes('precios') || ctx.body.toLowerCase().includes('planes') || ctx.body.includes('3Ô∏è‚É£')) {
            return gotoFlow(flowConsultarPrecios);
        }
        return fallBack('Por favor, elige una opci√≥n v√°lida (1, 2 o 3, o los emojis 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£). Escribe *MENU* para volver al inicio.');
    });

// Flujo para "Otra Zona" (Zona no cubierta)
const flowOtraZona = addKeyword(['otra_zona', 'otro', 'otra', 'mi zona no esta'])
    .addAnswer('Actualmente, nuestros servicios de internet se concentran en Fontana e Ibarreta.')
    .addAnswer('Por favor, cont√°ctanos directamente si deseas consultar la disponibilidad en otra zona: *[N√∫mero de Contacto para Otras Zonas]*')
    .addAnswer('¬øHay algo m√°s en lo que pueda ayudarte?', { delay: 1000 })
    .addAnswer('Escribe *MENU* para volver al inicio.', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }
        return fallBack('Si deseas explorar otras opciones, escribe *MENU* para volver al inicio.');
    });

// Flujo para "Servicio de Internet en Ibarra"
const flowServicioIbarra = addKeyword(['Ibarreta', '2', '2Ô∏è‚É£']) // Se agrega la keyword 2Ô∏è‚É£
    .addAnswer('Entendido, servicio en Ibarreta. ¬øNecesitas atenci√≥n administrativa o soporte t√©cnico?', { delay: 500 })
    // MODIFICADO: Uso de emojis de n√∫meros
    .addAnswer('1Ô∏è‚É£ Atenci√≥n Administrativa\n2Ô∏è‚É£ Servicio T√©cnico', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        if (ctx.body.includes('1') || ctx.body.toLowerCase().includes('administrativa') || ctx.body.includes('1Ô∏è‚É£')) {
            return gotoFlow(flowAtencionAdministrativa);
        }
        if (ctx.body.includes('2') || ctx.body.toLowerCase().includes('tecnico') || ctx.body.includes('2Ô∏è‚É£')) {
            return gotoFlow(flowServicioTecnico);
        }
        return fallBack('No entend√≠ tu respuesta. Por favor, elige una opci√≥n v√°lida (1 o 2, o los emojis 1Ô∏è‚É£, 2Ô∏è‚É£). Escribe *MENU* para volver al inicio.');
    });

// Flujo para "Servicio de Internet en Fontana"
const flowServicioFontana = addKeyword(['fontana', '1', '1Ô∏è‚É£']) // Se agrega la keyword 1Ô∏è‚É£
    .addAnswer('Perfecto, servicio en Fontana. ¬øNecesitas atenci√≥n administrativa o soporte t√©cnico?', { delay: 500 })
    // MODIFICADO: Uso de emojis de n√∫meros
    .addAnswer('1Ô∏è‚É£ Atenci√≥n Administrativa\n2Ô∏è‚É£ Servicio T√©cnico', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        if (ctx.body.includes('1') || ctx.body.toLowerCase().includes('administrativa') || ctx.body.includes('1Ô∏è‚É£')) {
            return gotoFlow(flowAtencionAdministrativa);
        }
        if (ctx.body.includes('2') || ctx.body.toLowerCase().includes('tecnico') || ctx.body.includes('2Ô∏è‚É£')) {
            return gotoFlow(flowServicioTecnico);
        }
        return fallBack('No entend√≠ tu respuesta. Por favor, elige una opci√≥n v√°lida (1 o 2, o los emojis 1Ô∏è‚É£, 2Ô∏è‚É£). Escribe *MENU* para volver al inicio.');
    });


// ----------------------------------------------------
// FLUJO PRINCIPAL (Punto de entrada del bot)
// ----------------------------------------------------

const flowPrincipal = addKeyword(['hola', 'ole', 'alo', 'buenos dias', 'buenas tardes', 'buenas noches', 'menu', EVENTS.WELCOME])
    .addAnswer('¬°Hola! Soy el ChatBot Vanguard. ¬øEn qu√© zona necesitas ayuda con tu servicio de internet?', { delay: 500 })
    .addAnswer('Por favor, elige una opci√≥n:', { delay: 500 })
    // MODIFICADO: Uso de emojis de n√∫meros
    .addAnswer('1Ô∏è‚É£ Servicio de Internet en Fontana\n2Ô∏è‚É£ Servicio de Internet en Ibarreta\n3Ô∏è‚É£ Otra Zona', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        if (ctx.body.includes('1') || ctx.body.toLowerCase().includes('Fontana') || ctx.body.includes('1Ô∏è‚É£')) {
            return gotoFlow(flowServicioFontana);
        }
        if (ctx.body.includes('2') || ctx.body.toLowerCase().includes('Ibarreta') || ctx.body.includes('2Ô∏è‚É£')) {
            return gotoFlow(flowServicioIbarra);
        }
        if (ctx.body.includes('3') || ctx.body.toLowerCase().includes('otra') || ctx.body.includes('3Ô∏è‚É£')) {
            return gotoFlow(flowOtraZona);
        }
        return fallBack('No entend√≠ tu respuesta. Por favor, elige una opci√≥n v√°lida (1, 2 o 3, o los emojis 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£).');
    })
    .addAnswer(
        'Lo siento, no entend√≠ tu solicitud. Por favor, utiliza las opciones del men√∫ o escribe *MENU* para empezar de nuevo.',
        { delay: 1500 }
    );


// ----------------------------------------------------
// FUNCI√ìN PRINCIPAL DE INICIO DEL BOT
// ----------------------------------------------------
const main = async () => {
    const adapterDB = new MockAdapter();

    const adapterFlow = createFlow([
        flowLlamarPersona,
        flowConsultarPrecios,
        flowMediosPago,
        flowInformarPago,
        flowServicioTecnico,
        flowAtencionAdministrativa,
        flowOtraZona,
        flowServicioIbarra,
        flowServicioFontana,
        flowPrincipal
    ]);
    const adapterProvider = createProvider(BaileysProvider);

    createBot({
        flow: adapterFlow,
        provider: adapterProvider,
        database: adapterDB,
    });

    QRPortalWeb();
};

main();