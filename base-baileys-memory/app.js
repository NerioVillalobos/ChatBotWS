// app.js
// Modificacion funcional- > luego de la correccion de errores de compilacion
// Modificado por: Nervill
// Fecha: 2024-01-15
// Version: 1.0.0.BETA-20240115-v0.1
const { createBot, createProvider, createFlow, addKeyword, EVENTS } = require('@bot-whatsapp/bot')

const QRPortalWeb = require('@bot-whatsapp/portal')
const BaileysProvider = require('@bot-whatsapp/provider/baileys')
const MockAdapter = require('@bot-whatsapp/database/mock')

/**
 * IMPORTANTE: Recuerda que los flujos se declaran de forma que los flujos "hijos"
 * (a los que se llega desde otro flujo) deben ser declarados ANTES del flujo "padre"
 * que los invoca.
 */

// Define los n√∫meros de atenci√≥n administrativa por localidad (NECESITAS REEMPLAZAR ESTOS VALORES)
const NUMERO_ADMIN_FONTANA = '5491140638555@s.whatsapp.net'; // Ejemplo: reemplazar con el n√∫mero real de WhatsApp del admin de Fontana
const NUMERO_ADMIN_IBARRETA = '5491140638555@s.whatsapp.net'; // Ejemplo: reemplazar con el n√∫mero real de WhatsApp del admin de Ibarreta

// ----------------------------------------------------
// FLUJOS FINALES / HOJAS DEL √ÅRBOL
// ----------------------------------------------------

// Flujo para "Llama a una persona" (general, usado tambi√©n para servicio t√©cnico)
const flowLlamarPersona = addKeyword(['llamar_persona', 'llamar', 'contacto', 'agente', 'hablar con alguien', 'otras consultas']) // A√±adimos 'otras consultas'
    .addAnswer('Perfecto! Lo derivamos con una persona de atenci√≥n para evacuar sus dudas.')
    .addAnswer('Por favor haga clic en el siguiente link:', null, async (ctx, { flowDynamic }) => {
        await flowDynamic('üìû https://bit.ly/4l1iOvh'); // Aseg√∫rate de que este link sea el correcto
    })
    .addAnswer('Horario de atenci√≥n: Lunes a Viernes de 9:00 AM a 6:00 PM.', { delay: 500 })
    .addAnswer(
        '¬øHay algo m√°s en lo que pueda ayudarte?\nEscribe *MENU* para volver al inicio.', // Se hace m√°s expl√≠cito el "MENU"
        {
            delay: 1000,
            capture: true,
            idle: 120000, // Se mantiene el idle por si funciona, pero el foco es el retorno manual.
            handleIdle: async (ctx, { flowDynamic, gotoFlow }) => {
                await flowDynamic('Parece que no has respondido. Regresando al men√∫ principal. Puedes escribir *MENU* en cualquier momento.'); // Mensaje m√°s claro
                return gotoFlow(flowPrincipal); // Asegura que el flujo se redirija despu√©s del idle.
            },
        },
        async (ctx, { gotoFlow, fallBack }) => {
            // Manejo de "MENU" al inicio del callback para que siempre sea una opci√≥n.
            if (ctx.body.toUpperCase().includes('MENU')) {
                return gotoFlow(flowPrincipal);
            }
            // Si el idle no se activa, este fallback debe atrapar la inactividad o entrada no esperada.
            // Para evitar bucles, el fallBack no deber√≠a ser recursivo indefinidamente.
            // Mensaje m√°s claro para entradas no v√°lidas.
            return fallBack('No entend√≠ tu respuesta. Si deseas explorar otras opciones, escribe *MENU* para volver al inicio.');
        },
        []
    );


// Flujo para "Informar un Pago"
const flowInformarPago = addKeyword(['informar_pago', 'ya pague', 'reportar pago'])
    .addAnswer(
        'Para informar tu pago, por favor, env√≠anos una captura del comprobante de transferencia junto con el nombre y DNI o CUIT del titular del servicio. Cuando hayas enviado todo, puedes escribir *LISTO* para finalizar.',
        {
            delay: 500,
            capture: true // Este capture espera tanto media como texto
        },
        async (ctx, { gotoFlow, flowDynamic, fallBack, provider }) => {
            const adminTargetNumber = NUMERO_ADMIN_FONTANA; // O NUMERO_ADMIN_IBARRETA
            const isMedia = ctx.message && (ctx.message.image || ctx.message.document || ctx.message.video);
            const remoteJid = ctx.from;

            // **IMPORTANTE: Nueva verificaci√≥n para ctx.body**
            // Si ctx.body no existe (es undefined), lo tratamos como una cadena vac√≠a para evitar errores.
            const messageBody = ctx.body ? ctx.body.toUpperCase().trim() : '';

            // 1. Manejo de "MENU" para salir r√°pidamente
            if (messageBody.includes('MENU')) {
                await flowDynamic('De acuerdo, volviendo al men√∫ principal.');
                return gotoFlow(flowPrincipal);
            }

            // 2. Manejo del comando "LISTO"
            if (messageBody.includes('LISTO') || messageBody.includes('TERMINAR') || messageBody.includes('FINALIZAR')) {
                await flowDynamic('¬°Gracias! Hemos recibido la informaci√≥n de tu pago. En breve lo verificaremos y actualizaremos tu estado. Cualquier duda adicional, puedes volver a iniciar el flujo o contactar a atenci√≥n al cliente.');
                return gotoFlow(flowPrincipal); // Finaliza el flujo y vuelve al men√∫ principal
            }

            // 3. Procesamiento de media (comprobantes)
            if (isMedia) {
                try {
                    // Determina el tipo de archivo y lo reenv√≠a
                    if (ctx.message.image) {
                        await provider.vendor.sendMessage(adminTargetNumber, {
                            image: { url: ctx.message.image.url },
                            caption: `Comprobante (IMG) de ${ctx.pushName} (${remoteJid}). Info: ${ctx.body || 'Sin texto adicional'}`
                        });
                    } else if (ctx.message.document) {
                        await provider.vendor.sendMessage(adminTargetNumber, {
                            document: { url: ctx.message.document.url },
                            mimetype: ctx.message.document.mimetype,
                            fileName: ctx.message.document.fileName,
                            caption: `Comprobante (DOC) de ${ctx.pushName} (${remoteJid}). Info: ${ctx.body || 'Sin texto adicional'}`
                        });
                    } else if (ctx.message.video) {
                        await provider.vendor.sendMessage(adminTargetNumber, {
                            video: { url: ctx.message.video.url },
                            caption: `Comprobante (VIDEO) de ${ctx.pushName} (${remoteJid}). Info: ${ctx.body || 'Sin texto adicional'}`
                        });
                    }
                    console.log(`Comprobante reenviado a ${adminTargetNumber}`);
                    await flowDynamic('¬°Comprobante recibido! Por favor, env√≠a el nombre y DNI/CUIT si a√∫n no lo has hecho. Cuando hayas enviado toda la informaci√≥n, escribe *LISTO*.');
                    return; // Permite seguir esperando m√°s inputs en este mismo addAnswer
                } catch (e) {
                    console.error('Error al reenviar comprobante:', e);
                    await flowDynamic('Hubo un problema al procesar tu comprobante. Por favor, int√©ntalo de nuevo o comun√≠cate directamente con soporte. Puedes escribir *MENU* para volver al inicio.');
                    return; // Mantiene el flujo esperando para reintentar o salir
                }
            }
            // 4. Procesamiento de texto (DNI/CUIT u otra informaci√≥n)
            // Se ejecuta solo si NO es media y SI hay alg√∫n texto (despu√©s de manejar "MENU" y "LISTO")
            else if (ctx.body && ctx.body.length > 0) {
                await provider.vendor.sendMessage(adminTargetNumber, {
                    text: `Informaci√≥n de pago recibida de ${ctx.pushName} (${remoteJid}): ${ctx.body}.`
                });
                console.log(`Informaci√≥n de pago reenviada a ${adminTargetNumber}`);
                await flowDynamic('¬°Informaci√≥n recibida! Por favor, env√≠a la captura del comprobante si a√∫n no lo has hecho. Cuando hayas enviado toda la informaci√≥n, escribe *LISTO*.');
                return; // Permite seguir esperando m√°s inputs en este mismo addAnswer
            }
            // 5. Fallback para entradas no v√°lidas (ni media, ni texto, ni MENU/LISTO)
            else {
                return fallBack('No entend√≠ tu respuesta. Por favor, env√≠a una *captura o archivo* de tu comprobante y el nombre y DNI o CUIT. Cuando hayas enviado todo, escribe *LISTO*. Tambi√©n puedes escribir *MENU* para volver al inicio.');
            }
        }
    );


// Flujo para "Conocer los medios de pago"
const flowMediosPago = addKeyword(['medios_pago', 'pagos', 'como pagar', 'donde pago'])
    .addAnswer('Puedes realizar tus pagos a trav√©s de los siguientes medios:', { delay: 500 })
    .addAnswer(
        '‚Ä¢ Pago en l√≠nea: [Link al Portal de Pagos]\n' +
        '‚Ä¢ Transferencia bancaria:\n' +
        '  *VANGUARD INTERNET SRL*\n' +
        '  CUIT: 30716576376\n' +
        '  CBU: 0170304520000031123901\n' +
        '  ALIAS: VANGUARD.INTERNET\n' +
        '‚Ä¢ Pagar en el local de Fontana: *Av. San Mart√≠n 1628*\n',
        null,
        async (ctx, { flowDynamic }) => {
            await flowDynamic('Recuerda incluir tu n√∫mero de cliente en la referencia.');
        }
    )
    .addAnswer('¬øHay algo m√°s en lo que pueda ayudarte?\nEscribe *MENU* para volver al inicio.', { delay: 1000, capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        // Manejo de "MENU" al inicio del callback para que siempre sea una opci√≥n.
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }
        return fallBack('No entend√≠ tu respuesta. Si deseas explorar otras opciones, escribe *MENU* para volver al inicio.'); // Mensaje m√°s claro
    });

// Flujo para "Consultar precios de los servicios"
const flowConsultarPrecios = addKeyword(['consultar_precios', 'precios', 'planes', 'costo'])
    .addAnswer('Para consultar nuestros planes y precios, visita nuestra p√°gina web: [Link a la P√°gina de Precios]')
    .addAnswer('Tambi√©n puedes contactarnos directamente al *[N√∫mero de Ventas]* para una atenci√≥n personalizada.')
    .addAnswer('¬øHay algo m√°s en lo que pueda ayudarte?\nEscribe *MENU* para volver al inicio.', { delay: 1000, capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        // Manejo de "MENU" al inicio del callback para que siempre sea una opci√≥n.
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }
        return fallBack('No entend√≠ tu respuesta. Si deseas explorar otras opciones, escribe *MENU* para volver al inicio.'); // Mensaje m√°s claro
    });

// Flujo para "Otras Consultas" (Modificaci√≥n para asegurar el retorno al men√∫)
const flowOtrasConsultas = addKeyword(['otras_consultas', '4', '4Ô∏è‚É£'])
    .addAnswer('Perfecto! Lo derivamos con una persona de atenci√≥n para evacuar sus dudas.', null, async (ctx, { flowDynamic }) => {
        // Enviar el link de contacto
        await flowDynamic('Por favor haga clic en el siguiente link: üìû https://bit.ly/4l1iOvh');
    })
    .addAnswer(
        '¬øHay algo m√°s en lo que pueda ayudarte?\nEscribe *MENU* para volver al inicio.', // M√°s expl√≠cito el "MENU"
        {
            delay: 1000, // Retraso antes de enviar este mensaje.
            capture: true, // Aqu√≠ el bot espera una respuesta.
            idle: 120000, // Se mantiene el idle.
            handleIdle: async (ctx, { flowDynamic, gotoFlow }) => {
                // Este bloque se ejecuta SI el usuario NO RESPONDE en 2 minutos.
                await flowDynamic('Parece que no has respondido. Regresando al men√∫ principal. Puedes escribir *MENU* en cualquier momento.'); // Mensaje m√°s claro
                return gotoFlow(flowPrincipal); // Vuelve al men√∫ principal.
            },
        },
        async (ctx, { gotoFlow, fallBack }) => {
            // Manejo de "MENU" al inicio del callback para que siempre sea una opci√≥n.
            if (ctx.body.toUpperCase().includes('MENU')) {
                return gotoFlow(flowPrincipal);
            }
            // Si la respuesta no es "MENU", le pedimos que use "MENU".
            // Para evitar el bucle de "no entend√≠", el fallBack debe ser cauteloso.
            return fallBack('No entend√≠ tu respuesta. Si deseas explorar otras opciones, escribe *MENU* para volver al inicio.'); // Mensaje m√°s claro
        }
    );

// ----------------------------------------------------
// FLUJOS INTERMEDIOS
// ----------------------------------------------------

// Flujo para "Servicio T√©cnico"
const flowServicioTecnico = addKeyword(['tecnico', 'problema', 'no tengo internet', 'soporte'])
    .addAnswer('¬°Importante! Antes de continuar, por favor, realiza estos pasos:')
    .addAnswer('‚Ä¢ Reinicia tu router o equipo.\n‚Ä¢ Verifica los cables y la alimentaci√≥n el√©ctrica.\n‚Ä¢ Confirma que realizaste estos pasos.', { delay: 1000 })
    .addAnswer('¬øYa realizaste estos pasos? (S√≠/No)', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        // Manejo de "MENU" al inicio del callback para que siempre sea una opci√≥n.
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }

        if (ctx.body.toLowerCase().includes('si') || ctx.body.toLowerCase().includes('s√≠')) {
            return gotoFlow(flowLlamarPersona);
        } else if (ctx.body.toLowerCase().includes('no')) {
            // Aseguramos que, incluso en 'no', se le d√© la opci√≥n de MENU
            return fallBack('Es fundamental que realices estos pasos para poder diagnosticar tu problema. Por favor, intenta de nuevo cuando los hayas completado. Si a√∫n as√≠ no puedes, podemos conectarte con un agente. Escribe *MENU* para volver al inicio.');
        } else {
            return fallBack('No entend√≠ tu respuesta. Por favor, responde "S√≠" o "No". Escribe *MENU* para volver al inicio.');
        }
    });

// Flujo para "Atenci√≥n Administrativa"
const flowAtencionAdministrativa = addKeyword(['administrativa', 'factura', 'pagos', 'planes', 'administracion'])
    .addAnswer('¬øEn qu√© puedo ayudarte con Atenci√≥n Administrativa?', { delay: 500 })
    .addAnswer('1Ô∏è‚É£ Informar un Pago\n2Ô∏è‚É£ Conocer Medios de Pago\n3Ô∏è‚É£ Consultar Precios de los Servicios\n4Ô∏è‚É£ Otras Consultas', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        // Manejo de "MENU" al inicio del callback para que siempre sea una opci√≥n.
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }

        if (ctx.body.includes('1') || ctx.body.toLowerCase().includes('informar') || ctx.body.includes('1Ô∏è‚É£')) {
            return gotoFlow(flowInformarPago);
        }
        if (ctx.body.includes('2') || ctx.body.toLowerCase().includes('medios') || ctx.body.includes('2Ô∏è‚É£')) {
            return gotoFlow(flowMediosPago);
        }
        if (ctx.body.includes('3') || ctx.body.toLowerCase().includes('precios') || ctx.body.toLowerCase().includes('planes') || ctx.body.includes('3Ô∏è‚É£')) {
            return gotoFlow(flowConsultarPrecios);
        }
        if (ctx.body.includes('4') || ctx.body.toLowerCase().includes('otras') || ctx.body.includes('4Ô∏è‚É£')) {
            return gotoFlow(flowOtrasConsultas);
        }
        return fallBack('No entend√≠ tu respuesta. Por favor, elige una opci√≥n v√°lida (1, 2, 3 o 4, o los emojis 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£, 4Ô∏è‚É£). Escribe *MENU* para volver al inicio.');
    });

// Flujo para "Otra Zona" (Zona no cubierta)
const flowOtraZona = addKeyword(['otra_zona', 'otro', 'otra', 'mi zona no esta'])
    .addAnswer('Actualmente, nuestros servicios de internet se concentran en Fontana e Ibarreta.')
    .addAnswer('Por favor, cont√°ctanos directamente si deseas consultar la disponibilidad en otra zona: *[N√∫mero de Contacto para Otras Zonas]*')
    .addAnswer('¬øHay algo m√°s en lo que pueda ayudarte?\nEscribe *MENU* para volver al inicio.', { delay: 1000, capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        // Manejo de "MENU" al inicio del callback para que siempre sea una opci√≥n.
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }
        return fallBack('No entend√≠ tu respuesta. Si deseas explorar otras opciones, escribe *MENU* para volver al inicio.'); // Mensaje m√°s claro
    });

// Flujo para "Servicio de Internet en Ibarreta"
const flowServicioIbarra = addKeyword(['Ibarreta', '2', '2Ô∏è‚É£'])
    .addAnswer('Entendido, servicio en Ibarreta. ¬øNecesitas atenci√≥n administrativa o soporte t√©cnico?', { delay: 500 })
    .addAnswer('1Ô∏è‚É£ Atenci√≥n Administrativa\n2Ô∏è‚É£ Servicio T√©cnico', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        // Manejo de "MENU" al inicio del callback para que siempre sea una opci√≥n.
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }

        if (ctx.body.includes('1') || ctx.body.toLowerCase().includes('administrativa') || ctx.body.includes('1Ô∏è‚É£')) {
            return gotoFlow(flowAtencionAdministrativa);
        }
        if (ctx.body.includes('2') || ctx.body.toLowerCase().includes('tecnico') || ctx.body.includes('2Ô∏è‚É£')) {
            return gotoFlow(flowServicioTecnico);
        }
        return fallBack('No entend√≠ tu respuesta. Por favor, elige una opci√≥n v√°lida (1 o 2, o los emojis 1Ô∏è‚É£, 2Ô∏è‚É£). Escribe *MENU* para volver al inicio.');
    });

// Flujo para "Servicio de Internet en Fontana"
const flowServicioFontana = addKeyword(['fontana', '1', '1Ô∏è‚É£'])
    .addAnswer('Perfecto, servicio en Fontana. ¬øNecesitas atenci√≥n administrativa o soporte t√©cnico?', { delay: 500 })
    .addAnswer('1Ô∏è‚É£ Atenci√≥n Administrativa\n2Ô∏è‚É£ Servicio T√©cnico', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        // Manejo de "MENU" al inicio del callback para que siempre sea una opci√≥n.
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }

        if (ctx.body.includes('1') || ctx.body.toLowerCase().includes('administrativa') || ctx.body.includes('1Ô∏è‚É£')) {
            return gotoFlow(flowAtencionAdministrativa);
        }
        if (ctx.body.includes('2') || ctx.body.toLowerCase().includes('tecnico') || ctx.body.includes('2Ô∏è‚É£')) {
            return gotoFlow(flowServicioTecnico);
        }
        return fallBack('No entend√≠ tu respuesta. Por favor, elige una opci√≥n v√°lida (1 o 2, o los emojis 1Ô∏è‚É£, 2Ô∏è‚É£). Escribe *MENU* para volver al inicio.');
    });


// ----------------------------------------------------
// FLUJO PRINCIPAL (Punto de entrada del bot)
// ----------------------------------------------------

// A√±adimos 'MENU' como un keyword principal para que siempre redirija al inicio si se escribe.
const flowPrincipal = addKeyword(['hola', 'ole', 'alo', 'buenos dias', 'buenas tardes', 'buenas noches', 'menu', EVENTS.WELCOME])
    .addAnswer(
        null,
        null,
        async (ctx, { flowDynamic }) => {
            const name = ctx.pushName || 'cliente';
            await flowDynamic(`¬°Hola ${name}! Soy el ChatBot Vanguard. ¬øEn qu√© zona necesitas ayuda con tu servicio de internet?`);
        },
        [],
    )
    .addAnswer('Por favor, elige una opci√≥n:', { delay: 500 })
    .addAnswer('1Ô∏è‚É£ Servicio de Internet en Fontana\n2Ô∏è‚É£ Servicio de Internet en Ibarreta\n3Ô∏è‚É£ Otra Zona', { capture: true }, async (ctx, { gotoFlow, fallBack }) => {
        // En flowPrincipal, 'MENU' ya es un keyword principal, as√≠ que no es estrictamente necesario aqu√≠,
        // pero lo dejo para consistencia y seguridad si el usuario est√° en este `capture`.
        if (ctx.body.toUpperCase().includes('MENU')) {
            return gotoFlow(flowPrincipal);
        }

        if (ctx.body.includes('1') || ctx.body.toLowerCase().includes('fontana') || ctx.body.includes('1Ô∏è‚É£')) {
            return gotoFlow(flowServicioFontana);
        }
        if (ctx.body.includes('2') || ctx.body.toLowerCase().includes('ibarret') || ctx.body.includes('2Ô∏è‚É£')) {
            return gotoFlow(flowServicioIbarra);
        }
        if (ctx.body.includes('3') || ctx.body.toLowerCase().includes('otra') || ctx.body.includes('3Ô∏è‚É£')) {
            return gotoFlow(flowOtraZona);
        }
        // El fallBack aqu√≠ tambi√©n menciona MENU
        return fallBack('No entend√≠ tu respuesta. Por favor, elige una opci√≥n v√°lida (1, 2 o 3, o los emojis 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£). Escribe *MENU* para volver al inicio.');
    })
    // Este √∫ltimo addAnswer en flowPrincipal act√∫a como un fallback general si nada m√°s coincide con los addKeyword
    // o con el capture del paso anterior.
    .addAnswer(
        'Lo siento, no entend√≠ tu solicitud. Por favor, utiliza las opciones del men√∫ o escribe *MENU* para empezar de nuevo.',
        { delay: 1500 }
    );


// ----------------------------------------------------
// FUNCI√ìN PRINCIPAL DE INICIO DEL BOT
// ----------------------------------------------------
const main = async () => {
    const adapterDB = new MockAdapter();

    const adapterFlow = createFlow([
        flowLlamarPersona,
        flowConsultarPrecios,
        flowMediosPago,
        flowInformarPago,
        flowServicioTecnico,
        flowAtencionAdministrativa,
        flowOtraZona,
        flowServicioIbarra,
        flowServicioFontana,
        flowOtrasConsultas, // Aseg√∫rate de incluir el nuevo flujo aqu√≠
        flowPrincipal
    ]);
    const adapterProvider = createProvider(BaileysProvider);

    createBot({
        flow: adapterFlow,
        provider: adapterProvider,
        database: adapterDB,
    });

    QRPortalWeb();
};

main();